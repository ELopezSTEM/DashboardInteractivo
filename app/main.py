# Importaciones para que la aplicacion encuentre las rutas
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importaciones de metodos de otras clases
from src.visualizations import pedidos_opiniones
from src.visualizations import pedidos_con_retraso as vis_pedidos_con_retraso
from src.visualizations import pedidos_por_ciudad
from src.analysis import tabla_ciudades
from src.analysis import get_estados
from src.visualizations import clientes_estado
from src.visualizations import top_categorias
from src.visualizations import dia_semana_mayor_ventas

# Importaciones de librerias
from datetime import datetime
import streamlit as st

# Metodo que carga la pantalla de inicio
def inicio():
    st.title("üìä Dashboard Interactivo Olist")

    st.write("""
        Bienvenido a la **aplicaci√≥n de an√°lisis de Olist**, dise√±ada para proporcionarte **informaci√≥n detallada** sobre el comportamiento de los **clientes**, los **pedidos**, y las **opiniones** que los usuarios dejan acerca de los productos.
        
        Olist es una plataforma de **e-commerce** que permite a los vendedores brasile√±os vender sus productos a trav√©s de un marketplace de ventas. Esta aplicaci√≥n te ayudar√° a analizar las m√©tricas clave para mejorar la toma de decisiones y entender los patrones detr√°s de las compras.

        ### Funcionalidades
        Esta aplicaci√≥n incluye un an√°lisis interactivo donde podr√°s explorar datos sobre:
        - **Clientes por estado y ciudad**
        - **Pedidos realizados por cliente y an√°lisis del ratio de compras**
        - **Tiempos de entrega y an√°lisis de retrasos**
        - **Rese√±as de clientes y puntuaciones por estado**

        ### Gu√≠a r√°pida
        1. **Clientes por Estado y Ciudad**: Obt√©n la distribuci√≥n de clientes seg√∫n su ubicaci√≥n.
        2. **Pedidos por Cliente**: Analiza el n√∫mero de pedidos por cliente y sus ratios.
        3. **Entregas Tard√≠as**: Identifica problemas de retrasos en la entrega por ciudad.
        4. **Opiniones de Clientes**: Explora las rese√±as y la puntuaci√≥n promedio por estado, excluyendo los pedidos con retraso.

        Para comenzar, usa el men√∫ en el **sidebar** y selecciona el an√°lisis que desees explorar.
    """)

# Metodo que carga la pantalla con el analisis relacionado con los clientes, los diferentes estados y ciudades
def clientes_estados_ciudades():
    st.title("üìç Clientes, Estados y Ciudades")
    st.write("En esta seccion se encuentran gr√°ficos relacionados a los clientes, estados y ciudades.\n Los gr√°ficos son reactivos a los cambios en los campos de fechas ubicados antes de los mismos.")
    st.markdown("---")

    st.subheader("Campos para modificar el rango de fechas:")

    # Definir un rango de fechas por defecto
    fecha_inicio_default = datetime(2000, 1, 1)
    fecha_fin_default = datetime(2025, 12, 31)

    # Crear los selectores de fechas
    fecha_inicio = st.date_input(
        "Selecciona la fecha de inicio", value=fecha_inicio_default)
    fecha_fin = st.date_input(
        "Selecciona la fecha de fin", value=fecha_fin_default)
    st.markdown("---")

    # Grafico de barras de numeros de clientes por estado
    st.subheader("Gr√°fico de barras N√∫mero de Clientes por Estado:")
    st.pyplot(clientes_estado(fecha_inicio, fecha_fin))
    st.markdown("---")

    # Tabla de numeros de clientes por ciudad
    st.subheader("Tabla N√∫mero de Clientes por Ciudad:")
    st.write(tabla_ciudades(fecha_inicio, fecha_fin))
    st.markdown("---")
    
    st.subheader("An√°lisis Descriptivo:")
    st.write("Hemos observado que las ciudades est√°n muy fragmentadas, hay muchas que solo tienen uno o muy pocos clientes. Esto indica que hay poca presencia de Olist en las peque√±as ciudades, casi todas las ventas son de las grandes  ciudades")
    st.markdown("---")
    
    st.subheader("Impacto, ¬øQue puede hacer el negocio para mejorar?:")
    st.write("Con los resultados obtenidos podemos tomar dos decisiones:")
    st.write("- Centrarnos en las ciudades mas grandes, ya que hay se centran la mayor√≠a de clientes.")
    st.write("- Explorar opciones de expansi√≥n en ciudades mas peque√±as, realizando por ejemplo campa√±as de publicidad.")
    st.markdown("---")
    
# Metodo que carga la pantalla con el analisis relacionado con los pedidos entre las diferentes ciudades y clientes
def pedidos_ciudades_clientes():
    st.title("üì¶ Pedidos y Clientes")
    st.write("En esta seccion se encuentra el an√°lisis relacionado con los pedidos y clientes de la tienda.\n Existen campos modificables por el usuario para visualizar cambios en los gr√°ficos en tiempo real.")
    st.markdown("---")

    st.subheader("Campos para modificar la informaci√≥n del gr√°fico:")
    # Sidebar con filtros
    top_n = st.slider("Selecciona el n√∫mero de ciudades a mostrar", 5, 10, 20)

    criterio = st.selectbox("Ordenar ciudades por",
            options=['Numero Pedidos', 'Porcentaje Pedidos',
                     'Ratio Pedidos Cliente'],
            format_func=lambda x: {
                'Numero Pedidos': "N√∫mero de pedidos",
                'Porcentaje Pedidos': "Porcentaje de pedidos",
                'Ratio Pedidos Cliente': "Pedidos por cliente (ratio)"
            }[x]
        )
    st.markdown("---")

    grafico, df = pedidos_por_ciudad(top_n, criterio)

        # Grafico de barras de numeros de clientes por estado
    st.subheader("Gr√°fico de barras Pedidos por Ciudad:")
    st.text("Este gr√°fico de barras muestra informaci√≥n relacionado con los pedidos en cada ciudad, puede mostrar diferente informaci√≥n dependiendo de lo seleccionado por el usuario anteriormente")
    st.pyplot(grafico)
    st.markdown("---")

    # Tabla de numeros de clientes por ciudad
    st.subheader("Tabla con toda la informaci√≥n del an√°lisis:")
    st.write(df)
    st.markdown("---")
    
    st.subheader("An√°lisis Descriptivo:")
    st.write("Sacamos unas conclusiones muy parecidas al punto anterior, hay poca presencia de Olist en peque√±as ciudades.\n Otro punto a destacar es que el ratio de pedidos por cliente es 1 en casi todas las ciudades, lo que indica una fidelidad pr√°cticamente nula.")
    st.markdown("---")
    
    st.subheader("Impacto, ¬øQue puede hacer el negocio para mejorar?:")
    st.write("Decisiones muy similares al punto anterior, y si de verdad ese es el ratio por cliente, se deber√≠a analizar porque pasa eso, ya que para una empresa la fidelizaci√≥n de los clientes es uno de los  aspectos mas importante:")
    st.markdown("---")

# Metodo que carga la pantalla con el analisis relacionado con los pedidos que han llegado con retraso
def pedidos_con_retraso():
    st.title("‚è±Ô∏è An√°lisis de Pedidos con Retraso")
    st.write("En esta seccion se encuentra el an√°lisis relacionado con los pedidos que cuentan con un retraso en su env√≠o.")
    st.markdown("---")
    # Grafico de barras de numeros de clientes por estado
    st.subheader("Gr√°ficos con datos relacionados a los retrasos de pedidos por ciudad:")
    # st.text("Este gr√°fico de barras muestra informaci√≥n relacionado con los pedidos en cada ciudad, puede mostrar diferente informaci√≥n dependiendo de lo seleccionado por el usuario anteriormente")
    graficos, df = vis_pedidos_con_retraso()
    for grafico in graficos:
        st.pyplot(grafico)
    st.markdown("---")
    
    # Tabla de numeros de clientes por ciudad
    st.subheader("Tabla con toda la informaci√≥n del an√°lisis:")
    st.write(df)
    st.markdown("---")
    
    st.subheader("An√°lisis Descriptivo:")
    st.write("Comprobamos que el 97.55% de los retrasos se debe a problemas log√≠sticos en el envio.")
    st.markdown("---")
    
    st.subheader("Impacto, ¬øQue puede hacer el negocio para mejorar?:")
    st.write("Mediante conclusiones aproximadas en c√°lculos entre diferentes fechas, identificar porque pasan esos retrasos y explorar opciones de mejora:")
    st.markdown("---")

# Metrodo que carga la pantalla con el analisis de las opiniones de los clientes en base a los pedidos
def opiniones_pedidos():
    st.title("‚≠ê Opiniones de Clientes")
    st.write("En esta seccion se encuentra el an√°lisis relacionado con las opiniones de los clientes.")
    st.markdown("---")
    
    # Subt√≠tulo y descripci√≥n inicial
    st.subheader("An√°lisis geogr√°fico de satisfacci√≥n del cliente")
    st.markdown(
        """
        Este mapa interactivo muestra la **puntuaci√≥n media de rese√±as por estado** en Brasil, 
        basado en las opiniones de los clientes que no han reportado retrasos. Cada estado est√° coloreado 
        seg√∫n su nivel de satisfacci√≥n, lo que permite identificar r√°pidamente las regiones con mejor o 
        peor percepci√≥n del servicio. Consta con marcadores interactuables para mayor detalle.
        """
    )

    # Mapa generado
    pedidos_opiniones()

def metricas_adicionales():
    
    st.title("‚ûï M√©tricas Adicionales")
    st.markdown("---")
    st.subheader("Gr√°fico de barras Categor√≠as Top por Estado:")
    st.text("Este gr√°fico muestra las categor√≠as de producto con mayor volumen de ventas en el estado seleccionado, permitiendo identificar preferencias regionales de consumo.")
    estados = get_estados()
    
    estado = st.selectbox("Seleccionar Estado",
            options=estados,
        )
    fig = top_categorias(estado)    
    # Gr√°fico de barras de categor√≠as m√°s vendidas por estado
    
    st.pyplot(fig)
    st.markdown("---")
    
    st.subheader("Porcentaje de estados seg√∫n su d√≠a de mayor venta")
    st.markdown(
        """
        Este gr√°fico muestra qu√© porcentaje de los estados tiene su mayor volumen de ventas en cada d√≠a de la semana.
        """
    )
    st.pyplot(dia_semana_mayor_ventas())

# Definicion de la sidebar
def sidebar():

    with st.sidebar:

        # Logo y t√≠tulo del sidebar
        st.image("img/logo.png", width=80, )  # Opcional
        st.title("üîç Navegaci√≥n")

        # Secciones del dashboard
        seccion = st.radio("Selecciona una secci√≥n:", [
            "üè† Inicio",
            "üìç Clientes, Estados y Ciudades",
            "üì¶ Pedidos, Ciudades y Clientes",
            "‚è±Ô∏è Pedidos con Retraso",
            "‚≠ê Opiniones (Reviews)",
            "‚ûï M√©tricas Adicionales",
        ])

    selector_secciones(seccion)

# Logica para el selector de las secciones de la aplicacion
def selector_secciones(seccion):

    if seccion == "üè† Inicio":
        inicio()

    elif seccion == "üìç Clientes, Estados y Ciudades":
        clientes_estados_ciudades()

    elif seccion == "üì¶ Pedidos, Ciudades y Clientes":
        pedidos_ciudades_clientes()

    elif seccion == "‚è±Ô∏è Pedidos con Retraso":
        pedidos_con_retraso()

    elif seccion == "‚≠ê Opiniones (Reviews)":
        opiniones_pedidos()
        
    elif seccion == "‚ûï M√©tricas Adicionales":
        metricas_adicionales()


sidebar()
