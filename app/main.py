# Importaciones para que la aplicacion encuentre las rutas
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importaciones de librerias
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

# Importaciones de metodos de otras clases
from src.visualizations import clientes_estado
from src.analysis import tabla_ciudades
from src.visualizations import pedidos_por_ciudad
from src.visualizations import pedidos_con_retraso

# Definicion de la sidebar
def sidebar():
        
    with st.sidebar:
        
        # Logo y t√≠tulo del sidebar
        st.image("img/logo.png", width=80, )  # Opcional
        st.title("üîç Navegaci√≥n")

        # Secciones del dashboard
        seccion = st.radio("Selecciona una secci√≥n:", [
            "üè† Inicio",
            "üìç Clientes, Estados y Ciudades",
            "üì¶ Pedidos, Ciudades y Clientes",
            "‚è±Ô∏è Pedidos con Retraso",
            "‚≠ê Opiniones (Reviews)",
            "‚ûï M√©tricas Adicionales",
        ])
    
    selector_secciones(seccion)

# Logica para el selector de las secciones de la aplicacion
def selector_secciones(seccion):

    if seccion == "üè† Inicio":

        st.title("üìä Dashboard Interactivo Olist")

        st.write("""
        Bienvenido a la **aplicaci√≥n de an√°lisis de Olist**, dise√±ada para proporcionarte **informaci√≥n detallada** sobre el comportamiento de los **clientes**, los **pedidos**, y las **opiniones** que los usuarios dejan acerca de los productos.
        
        Olist es una plataforma de **e-commerce** que permite a los vendedores brasile√±os vender sus productos a trav√©s de un marketplace de ventas. Esta aplicaci√≥n te ayudar√° a analizar las m√©tricas clave para mejorar la toma de decisiones y entender los patrones detr√°s de las compras.

        ### Funcionalidades
        Esta aplicaci√≥n incluye un an√°lisis interactivo donde podr√°s explorar datos sobre:
        - **Clientes por estado y ciudad**
        - **Pedidos realizados por cliente y an√°lisis del ratio de compras**
        - **Tiempos de entrega y an√°lisis de retrasos**
        - **Rese√±as de clientes y puntuaciones por estado**

        ### Gu√≠a r√°pida
        1. **Clientes por Estado y Ciudad**: Obt√©n la distribuci√≥n de clientes seg√∫n su ubicaci√≥n.
        2. **Pedidos por Cliente**: Analiza el n√∫mero de pedidos por cliente y sus ratios.
        3. **Entregas Tard√≠as**: Identifica problemas de retrasos en la entrega por ciudad.
        4. **Opiniones de Clientes**: Explora las rese√±as y la puntuaci√≥n promedio por estado, excluyendo los pedidos con retraso.

        Para comenzar, usa el men√∫ en el **sidebar** y selecciona el an√°lisis que desees explorar.
        """)
        
        total_clientes = 35000
        total_pedidos = 250000
        pedidos_tarde = 5000
        reviews_promedio = 4.3

        st.subheader("üìä M√©tricas clave")
        st.write(f"- **Total de clientes**: {total_clientes}")
        st.write(f"- **Total de pedidos**: {total_pedidos}")
        st.write(f"- **Pedidos con retraso**: {pedidos_tarde} ({(pedidos_tarde / total_pedidos) * 100:.2f}%)")
        st.write(f"- **Puntuaci√≥n promedio de reviews**: {reviews_promedio} ‚≠ê")

        # Incluir gr√°ficos peque√±os, si es necesario (ejemplo con Matplotlib)
        import matplotlib.pyplot as plt
        import numpy as np

        # Gr√°fico simple de ejemplo (evoluci√≥n de pedidos en el tiempo)
        fig, ax = plt.subplots(figsize=(10, 5))
        fechas = pd.date_range(start="2023-01-01", end="2023-12-31", freq="M")
        pedidos = np.random.randint(10000, 25000, size=len(fechas))
        ax.plot(fechas, pedidos, marker="o", color="green")
        ax.set_title("Evoluci√≥n mensual de pedidos")
        ax.set_xlabel("Mes")
        ax.set_ylabel("N√∫mero de pedidos")
        ax.grid(True)

        # Mostrar el gr√°fico en Streamlit
        st.pyplot(fig)

    elif seccion == "üìç Clientes, Estados y Ciudades":
        st.title("üìç Clientes, Estados y Ciudades")
        st.write("En esta seccion se encuentran gr√°ficos relacionados a los clientes, estados y ciudades.\n Los gr√°ficos son reactivos a los cambios en los campos de fechas ubicados antes de los mismos.")
        st.markdown("---")
        
        st.subheader("Campos para modificar el rango de fechas:")

        # Definir un rango de fechas por defecto
        fecha_inicio_default = datetime(2000, 1, 1)
        fecha_fin_default = datetime(2025, 12, 31)

        # Crear los selectores de fechas
        fecha_inicio = st.date_input("Selecciona la fecha de inicio", value=fecha_inicio_default)
        fecha_fin = st.date_input("Selecciona la fecha de fin", value=fecha_fin_default)
        st.markdown("---")
        
        # Grafico de barras de numeros de clientes por estado
        st.subheader("Gr√°fico de barras N√∫mero de Clientes por Estado:")
        st.pyplot(clientes_estado(fecha_inicio, fecha_fin))
        st.markdown("---")
        
        # Tabla de numeros de clientes por ciudad
        st.subheader("Tabla N√∫mero de Clientes por Ciudad:")
        st.write(tabla_ciudades(fecha_inicio, fecha_fin))
        st.markdown("---")

    elif seccion == "üì¶ Pedidos, Ciudades y Clientes":
        st.title("üì¶ Pedidos y Clientes")
        st.write("En esta seccion se encuentra el an√°lisis relacionado con los pedidos y clientes de la tienda.\n Existen campos modificables por el usuario para visualizar cambios en los gr√°ficos en tiempo real.")
        st.markdown("---")
        
        st.subheader("Campos para modificar la informaci√≥n del gr√°fico:")
        # Sidebar con filtros
        top_n = st.slider("Selecciona el n√∫mero de ciudades a mostrar", 5, 10, 20)
        
        criterio = st.selectbox(
            "Ordenar ciudades por",
            options=['num_pedidos', 'porcentaje_pedidos', 'ratio_pedidos_cliente'],
            format_func=lambda x: {
                'num_pedidos': "N√∫mero de pedidos",
                'porcentaje_pedidos': "Porcentaje de pedidos",
                'ratio_pedidos_cliente': "Pedidos por cliente (ratio)"
            }[x]
        )
        st.markdown("---")
        
        grafico, df = pedidos_por_ciudad(top_n, criterio)
        
        # Grafico de barras de numeros de clientes por estado
        st.subheader("Gr√°fico de barras Pedidos por Ciudad:")
        st.text("Este gr√°fico de barras muestra informaci√≥n relacionado con los pedidos en cada ciudad, puede mostrar diferente informaci√≥n dependiendo de lo seleccionado por el usuario anteriormente")
        st.pyplot(grafico)
        st.markdown("---")
        
        # Tabla de numeros de clientes por ciudad
        st.subheader("Tabla con toda la informaci√≥n del an√°lisis:")
        st.write(df)
        st.markdown("---")

    elif seccion == "‚è±Ô∏è Pedidos con Retraso":
        st.title("‚è±Ô∏è An√°lisis de Pedidos con Retraso")
        st.write("En esta seccion se encuentra el an√°lisis relacionado con los pedidos que cuentan con un retraso en su env√≠o.\n Existen campos modificables por el usuario para visualizar cambios en los gr√°ficos en tiempo real.")
        st.markdown("---")
        
        # Grafico de barras de numeros de clientes por estado
        st.subheader("Gr√°fico de barras Pedidos por Ciudad:")
        st.text("Este gr√°fico de barras muestra informaci√≥n relacionado con los pedidos en cada ciudad, puede mostrar diferente informaci√≥n dependiendo de lo seleccionado por el usuario anteriormente")
        
        st.markdown("---")
        
        pedidos_con_retraso()

    elif seccion == "‚≠ê Opiniones (Reviews)":
        st.title("‚≠ê Opiniones de Clientes")
        # N¬∫ de reviews, promedio por estado, sin pedidos tard√≠os

    elif seccion == "‚ûï M√©tricas Adicionales":
        st.title("‚ûï M√©tricas Adicionales")
        # Cualquier an√°lisis extendido o bonus que decidas agregar

sidebar()
