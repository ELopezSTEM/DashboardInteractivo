import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

from src.visualizations import grafico_barras_estados
from src.analysis import tabla_ciudades

# Logo y t√≠tulo (opcional)
with st.sidebar:
    st.image("img/logo.png", width=80, )  # Opcional
    st.title("üîç Navegaci√≥n")

    # Navegador principal
    seccion = st.radio("Selecciona una secci√≥n:", [
        "üè† Inicio",
        "üìç Clientes, Estados y Ciudades",
        "üì¶ Pedidos por Cliente",
        "‚è±Ô∏è Entregas Tard√≠as",
        "‚≠ê Opiniones (Reviews)",
        "‚ûï M√©tricas Adicionales",
    ])

# L√≥gica para cada secci√≥n
if seccion == "üè† Inicio":
    # T√≠tulo de la secci√≥n
    st.title("üìä Dashboard Interactivo Olist")

# Breve introducci√≥n de la app y Olist
    st.write("""
    Bienvenido a la **aplicaci√≥n de an√°lisis de Olist**, dise√±ada para proporcionarte **informaci√≥n detallada** sobre el comportamiento de los **clientes**, los **pedidos**, y las **opiniones** que los usuarios dejan acerca de los productos.
    
    Olist es una plataforma de **e-commerce** que permite a los vendedores brasile√±os vender sus productos a trav√©s de un marketplace de ventas. Esta aplicaci√≥n te ayudar√° a analizar las m√©tricas clave para mejorar la toma de decisiones y entender los patrones detr√°s de las compras.

    ### Funcionalidades
    Esta aplicaci√≥n incluye un an√°lisis interactivo donde podr√°s explorar datos sobre:
    - **Clientes por estado y ciudad**
    - **Pedidos realizados por cliente y an√°lisis del ratio de compras**
    - **Tiempos de entrega y an√°lisis de retrasos**
    - **Rese√±as de clientes y puntuaciones por estado**

    ### Gu√≠a r√°pida
    1. **Clientes por Estado y Ciudad**: Obt√©n la distribuci√≥n de clientes seg√∫n su ubicaci√≥n.
    2. **Pedidos por Cliente**: Analiza el n√∫mero de pedidos por cliente y sus ratios.
    3. **Entregas Tard√≠as**: Identifica problemas de retrasos en la entrega por ciudad.
    4. **Opiniones de Clientes**: Explora las rese√±as y la puntuaci√≥n promedio por estado, excluyendo los pedidos con retraso.

    Para comenzar, usa el men√∫ en el **sidebar** y selecciona el an√°lisis que desees explorar.
    """)
    
    total_clientes = 35000
    total_pedidos = 250000
    pedidos_tarde = 5000
    reviews_promedio = 4.3

    st.subheader("üìä M√©tricas clave")
    st.write(f"- **Total de clientes**: {total_clientes}")
    st.write(f"- **Total de pedidos**: {total_pedidos}")
    st.write(f"- **Pedidos con retraso**: {pedidos_tarde} ({(pedidos_tarde / total_pedidos) * 100:.2f}%)")
    st.write(f"- **Puntuaci√≥n promedio de reviews**: {reviews_promedio} ‚≠ê")

    # Incluir gr√°ficos peque√±os, si es necesario (ejemplo con Matplotlib)
    import matplotlib.pyplot as plt
    import numpy as np

    # Gr√°fico simple de ejemplo (evoluci√≥n de pedidos en el tiempo)
    fig, ax = plt.subplots(figsize=(10, 5))
    fechas = pd.date_range(start="2023-01-01", end="2023-12-31", freq="M")
    pedidos = np.random.randint(10000, 25000, size=len(fechas))
    ax.plot(fechas, pedidos, marker="o", color="green")
    ax.set_title("Evoluci√≥n mensual de pedidos")
    ax.set_xlabel("Mes")
    ax.set_ylabel("N√∫mero de pedidos")
    ax.grid(True)

    # Mostrar el gr√°fico en Streamlit
    st.pyplot(fig)

elif seccion == "üìç Clientes, Estados y Ciudades":
    st.title("üìç Clientes, Estados y Ciudades")
    st.write("En esta seccion se encuentran gr√°ficos relacionados a los clientes, estados y ciudades.\n Los gr√°ficos son reactivos a los cambios en los campos de fechas ubicados antes de los mismos.")
    st.markdown("---")
    st.subheader("Campos para modificar el rango de fechas:")
    
    # Definir un rango de fechas por defecto (puedes ajustarlo seg√∫n tus necesidades)
    fecha_inicio_default = datetime(2000, 1, 1)
    fecha_fin_default = datetime(2025, 12, 31)

    # Crear los selectores de fechas
    fecha_inicio = st.date_input("Selecciona la fecha de inicio", value=fecha_inicio_default)
    fecha_fin = st.date_input("Selecciona la fecha de fin", value=fecha_fin_default)
    
    st.markdown("---")
    
    st.subheader("Gr√°fico de barras N√∫mero de Clientes por Estado:")
    
    st.pyplot(grafico_barras_estados(fecha_inicio, fecha_fin))
    
    st.markdown("---")
    
    st.subheader("Tabla N√∫mero de Clientes por Ciudad:")
    
    st.write(tabla_ciudades(fecha_inicio, fecha_fin))
    

elif seccion == "üì¶ Pedidos por Cliente":
    st.title("üì¶ Pedidos por Cliente")
    # Pedidos, % del total, ratio por cliente

elif seccion == "‚è±Ô∏è Entregas Tard√≠as":
    st.title("‚è±Ô∏è An√°lisis de Entregas Tard√≠as")
    # N¬∫ de pedidos tarde, % y diagn√≥stico

elif seccion == "‚≠ê Opiniones (Reviews)":
    st.title("‚≠ê Opiniones de Clientes")
    # N¬∫ de reviews, promedio por estado, sin pedidos tard√≠os

elif seccion == "‚ûï M√©tricas Adicionales":
    st.title("‚ûï M√©tricas Adicionales")
    # Cualquier an√°lisis extendido o bonus que decidas agregar
